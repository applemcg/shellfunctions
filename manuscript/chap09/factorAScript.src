
 [origscript]: http://goo.gl/RuXmvJ  "Original Script on ITtoolbox"

 [lastfuncts]: http://shellfunctions.tiddlyspace.com/#FactorAshellScript
               "Resulting Functions on ITtoolbox"

 [readme]: http://mcgowans.org/pubs/shellfunctions/README.md

# Factor a shell script

This  chapter takes  a  fairly  common type  of  shell script  through
fourteen revisions, factoring it all into shell functions.

The first question  is easy to answer: _Why bother?_  When you see the
result, you'll have to agree that  functions are easier to maintain in
the  face  of  changing  requirements.    They  should  be  easier  to
understand, since  each function's job is  simpler.  Importantly, they
should be easier to test, given the component nature of the functions.

The big liability to the functional approach is that it's not been the
way  most command-line  programming has  been taught,  if at  all.  My
sense is that most programmers start  with the job at hand, proceeding
in some serial fashion through the steps to set up the problem, gather
some telling  data, query  the system for  its information,  then make
some decision about either the nominal or exceptional cases and either
leave some distinct evidence or report or act on the results.

The script I chose to factor is just big enough to demonstrate each of
the  fundamental  principles  for  choosing functions  over  a  single
monolithic script.

## The problem as solved.

Here is  the script a user  posted on *ITtoolbox*, a  Unix, linux, and
shell scripting forum:

@include ./version_001.tab

In this exercise I've made successive small changes, which we'll step
through, one at a time, changing a few lines at a time. 

## Objectives of the method.

What sort of changes will I make here, and why?

1. write functions testable from the command line, making them 
   reusable and  more maintainable,
1. reduce the syntactic noise
1. eliminate temporary files
1. eliminate temporary shell variables
1. use function arguments wherever possible
1. collapse the problem into a single executable command, itself
   a function.

Why then, should you consider taking a working script through the
exercise of factoring into functions and into a function library?

Some of the  above steps suggest why you might,  but taking a possible
higher perspective,  it's difficult  to say  which is  more important:
increase understanding  of the  immediate problem, or  the longer-term
productivity gain in building re-usable components.

Here is a preview of what's involved in making the changes.

### Testable components

When factoring  scripts into functions  you soon notice  the functions
are separately testable from the  command line.  For instance, I often
see questions in  the shell forums like: _"I've got  this script which
works when ...  except when ... "_.  Too often  the problem boils down
to some shell or file-system detail  which could have been isolated in
a separately testable function.

In such cases,  I believe it's a positive learning  experience to home
in on the simple facet and  build a solution for the low-level detail.
With practice and experience,  you'll be discovering _natural factors_
of the environment which should lead to a fair degree of re-use.

When it's time to name a function, think of action verbs which
describe _what_ is happening rather than _how_. Occasionally use
verb-noun pairs.  I'll offer no suggestions on name conventions, other
than notice I use both underscore (\_) and _camel-Case_ notations
for multi-word function names.

### Syntactic noise
 
What is _syntactic noise_?  Any  highly repeated syntax element of the
programming language.  The easiest one to spot is the repeated use, or
use at all of  the _append to file_ syntax ( __>>__  ).  Where you see
this in a  script, you've identified the place to  _factor_ the script
into functions.   If you're  not familiar  with the  so-called reverse
engineering practice of factoring, it's collecting small code segments
into separate components.  In this case, shell functions.

### Temporary files

Eliminating temporary  files will  lead to  simpler functions,  if not
better use of system resources.   People often mis-interpret this goal
as  improving  machine  performance.  The  more  important  reason  is
improving human understanding.  The  Unix &reg#; __pipe__ was invented
as a means to connect smaller, well-specified processes.

Uses of  a temporary  file, when  a pipe  would suffice,  exhibits the
designer's lack of  confidence in what is  a well-specified component.
A well-constructed pipeline, with meaningful functions, is more easily
read and  understood than  a thicket of  re-directions to  a temporary
file.

### Shell variables

Temporary variables with  well-chosen names may be  attractive, but as
we will see in this example, two variables are really used as one, and
might  even have  been written  into a  simple function,  not for  any
reason in this  code as such, but as generic  means of identifying the
server.

This exercise concludes  by introducing an ENVIRONMENT  variable for a
log, or message file.  This does two things: it allows users to define
their  own  log  file,  or   possibly  make  the  logs  execution-time
dependent, or it may throw into  question the need for this particular
log file at all.

### Arguments

The use of arguments supports the ability to factor the problem into a
single  high-level command.   This high-level  command may  become the
focus  of  a  wider  generalization   where  system  names,  log  file
conventions, and  in this case  email-recipients are decided,  and not
written into operational code.

Concise functions needn't re-name positional parameters.  When it
appears, the function `warn_status` demonstrates a useful exception to
the rule:

- peel off re-used first arguments when the remainder is a variable list
- when a default list of arguments is useful for testing
- when literal text would otherwise make the code less readable

### A top function

This script's  author says it's successfully  used in a crontab  at 10
minute intervals.

In its un-factored form, it offers  too-great a temptation to copy the
entire  thing,  make  a  few changes,  and  thus  proliferate  natural
components in an un-maintainable fashion.   Not that evolution is bad,
but with a  functional approach, each maintainer may  be challenged to
discover ways to keep the general code working while introducing local
distinct  criteria.   I'll  point  at   a  few  possibilities  in  the
conclusion.

## The example

Let's take a look,  first at the script as presented,  and at the risk
of  appearing daunting,  the  final  script here.  It's  ready for  real
maintenance.

### The first and last scripts

Here is the [working script](./version_001.txt) and the resulting
script in script in [fully factored functions](./version_015.txt).

Until the authoring tools simplify putting *targets* in the file links,
use your browser's menu options to open a link in a **new window**. 
With that in mind, as you proceed through
the examples, for ease of comparison, keep the prior and updated versions of the script in 
separate windows.

Again, don't be daunted.  In fourteen revisions, each with a specific
goal in mind is presented with three pieces:

* the current script,
* the changes (from an __sdiff__ comparison), and
* the resulting script.

Each step is accompanied by an explanation, some direction to point
out how you may inspect your work to take advantage of the
modification, and a few shell tricks on how to bury the syntactic
sugar.  In this printed form, the _resulting script_ is the same as
the next step's _current script_.  A future edition 
could display separate screens for each of the three pieces.

The **changes** to following code samples are the result of an `sdiff`
command comparing the two versions, before, the **current script** and
after, the **next version**.  This latter is identical to the _current
script_ in the following paragraph.  The redundancy makes each change
a self-contained exercise.

### 1. Put the shortest condition first

Learn to use these shell operators, `||` and  `&&`, standing for
the logical **OR** and **AND**  as results of the _test_ operator.

Here note the logic change, which puts the shorter block first.

 [ [current script](./version_001.txt)
][ [changes](./version_001.dif)
][ [next version](./version_002.txt) ]

To change the order of the `if` and `else`, invert the logic.  Note
the normal (non error) exit moves into the code block within the OR
idiom: `|| { ...  }`.  This is a step to identifying a function.  Also
note the final exit is the error condition, hence the `exit 1`

### 2. Eliminate unneeded variables

Now updated with the previous changes, 

 [ [current script](./version_002.txt)
][ [changes](./version_002.dif)
][ [next version](./version_003.txt) ]

Here is the next modification to introduces SYSID replacing two
variable names.  This change anticipates a later revision to
completely remove the variable. A change of this sort needn't be
anticipated before-hand.  It's the sort of change you may notice later
in the factoring exercise.

### 3. Eliminate a variable 

Here we introduce the bash _dollar paren_ idiom to capture the
value of an expression as a command argument.

    $ command ...   $( sub-command ... ) 
      
where the result of the enclosed sub-command is returned as an
argument or arguments to the calling command.

 [ [current script](./version_003.txt)
][ [changes](./version_003.dif)
][ [next version](./version_004.txt) ]

Look for this expression,

      [[ -n $(df -kt |grep 9[4-9]%) ]]  || {


which replaces the 'x' variable with internal evaluation.  (a too-busy
evaluation is an excellent place for a function)


### 4. Add warning-file variable

this is a set-up prior to eliminating it.
save the warning file name as a variable to be eliminated later.      

 [ [current script](./version_004.txt)
][ [changes](./version_004.dif)
][ [next version](./version_005.txt) ]


### 5. Add a function 

the **syswarn** function delivers on a promise
here, adding the functions eliminates repeatedly appending to a file.      

 [ [current script](./version_005.txt)
][ [changes](./version_005.dif)
][ [next version](./version_006.txt) ]

### 6. Remove a variable 

begin removing SYSID variable by using it as a function argument
the SYSID variable is now the argument to the function.

 [ [current script](./version_006.txt)
][ [changes](./version_006.dif)
][ [next version](./version_007.txt) ]


### 7. Eliminate a variable, anticipate passing as arguments
      
eliminating MAILLIST, and replacing with literal arguments for a
moment shows where the ultimate high-level command arguments, i.e.
the destination email addresses will be supplied.

 [ [current script](./version_007.txt)
][ [changes](./version_007.dif)
][ [next version](./version_008.txt) ]



### 8. Add functions using an argument

Add **ok\_status** and  **warn\_status** functions taking same SYSID as argument.

And eliminate HSTNM, OSLVL variables which collapse into SYSID.


SYSID variable now uses functions returning appropriate values, and the 
warning message is now within it's own function.


 [ [current script](./version_008.txt)
][ [changes](./version_008.dif)
][ [next version](./version_009.txt) ]

### 9. Eliminate warning warning variable

Use warning file explicitly in the one place it is required,
anticipating ENVIRONMENT variable at end.

 [ [current script](./version_009.txt)
][ [changes](./version_009.dif)
][ [next version](./version_010.txt) ]

### 10. Move warn_status function to the top of the list. no coding changes

 [ [current script](./version_010.txt)
][ [changes](./version_010.dif)
][ [next version](./version_011.txt) ]

### 11. Re-invert the logic of the test, moving OK status to the end.

 [ [current script](./version_011.txt)
][ [changes](./version_011.dif)
][ [next version](./version_012.txt) ]

### 12. Eliminate SYSID as variable

by passing the argument to the new function chk_status, issues either
warning or OK.

 [ [current script](./version_012.txt)
][ [changes](./version_012.dif)
][ [next version](./version_013.txt) ]

### 13. Add shifted function

This allows chk_status to pass SYSID ema1 ema2 ... emaN arguments

 [ [current script](./version_013.txt)
][ [changes](./version_013.dif)
][ [next version](./version_014.txt) ]
      

### 14. Move hard-coded warning file to ENVIRONMENT variable.

Then, maybe the ... tee file ... may be altogether eliminated.

 [ [current script](./version_014.txt)
][ [changes](./version_014.dif)
][ [next version](./version_015.txt) ]

## Conclusions


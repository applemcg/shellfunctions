book_history () 
{ 
    : date: 2018-06-29;
    cat $(funthruch)
}
incl () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    include $* 2> .include.err
}
capfun () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    declare -f $* | sed 's/^/    /' | tee ${1}.sh
}
finincl () 
{ 
    : generate include SHELL functions from txt list,;
    : defaulting to functions.txt;
    : date: 2018-06-28;
    : date: 2018-06-29;
    sed 's/^/@include /; s/$/.sh/' ${1:-functions.txt}
}
funthruch () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    dir=$(basename $PWD);
    touch functions.txt;
    for f in ../chap*/functions.txt;
    do
        echo $f;
        case $f in 
            *$dir*)
                echo DONE > /dev/stderr;
                break
            ;;
        esac;
    done
}
ctob () 
{ 
    : date: 2018-07-28;
    shd_setdate $* | tee -a $(booklib)
}
chno () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    basename $PWD | tr -d a-zA-Z
}
tomd () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    report_notfile ${1:-NoFileArgument} && return 1;
    set $1 ../ch$(chno)_$1 ${1%.*}.html;
    incl $1 > $2;
    markdown $2 > $3;
    open $3
}
forgetlib () 
{ 
    : date: 2018-06-28;
    : date: 2018-06-29;
    unset $(functions $(ls -t *lib))
}
booklib () 
{ 
    : date: 2018-07-28;
    llibs | grep $(myname)
}
funfiles () 
{ 
    : date: 2018-06-29;
    ls $(cat $(funthruch) | sed 's/^/..\/*\//; s/$/.sh/')
}
loclib () 
{ 
    : date: 2018-06-29;
    ${*:-cat} $(ls *.sh)
}
libshere () 
{ 
    : date: 2018-06-29;
    set locallib comprelib;
    loclib > $1;
    comprlib cat > $2;
    flcomm $*
}
comprlib () 
{ 
    : date: 2018-06-29;
    ${*:-ls} $(book_history | sed 's/^/..\/chap*\//; s/$/.sh/')
}
prepmake () 
{ 
    : date: 2018-07-28;
    set -- *.md;
    [[ $# -lt 1 ]] && return;
    backup $* $(cat $* | grep  '@include' | field 2 | tee .tokeep)
}
local_refs () 
{ 
    : date: 2018-07-28;
    grep '](#' ${*:-*.md} | sed 's/^/ /; s/:/ /; s/ .*\](#/ /;s/).*//' | uniq
}
extract_new () 
{ 
    : date: 2018-07-28;
    cat ${*:-*.md } | awk -v chno=$(chno) '

                             { print nc, nf, $0 > "/dev/stderr"; }
   
$1 ~ /##/ && $3 ~ /Concept/  { nf = 0;nc=1; next }

NF > 1 && nc && $1 ~ /[+]/   { gsub(/\+/,""); printf "%s %02d\t%s\n", "concept", chno, $0  }

$1 ~ /##/ && $3 ~ /Function/ { nc = 0; nf=1; next }

NF > 1 && nf && $1 ~ /[+]/   { gsub(/\+/,""); printf "%s %02d\t%s\n", "function", chno, $0  }

$1 ~ /##/                    { nc = nf = 0; }

'
}
smd () 
{ 
    : date: 2018-06-27;
    : produces TXT, HTML from MD source;
    : where TXT is the include-resolved copy;
    : if in "source" directory then TXT, CSS, and HTML;
    : are linked to ../html directory;
    : since we are using csslink.SRC;
    : date: 2018-08-19;
    : date: 2019-10-09;
    :;
    report_notfile $1 && return 1;
    app_trace $*;
    mdheader;
    set ${1%.src}.{md,src,tmp,err} csslink.src $*;
    newest $1 ${2} $(included ${*:2}) || { 
        app_trace include $5 $2 STDERR $4 TEE $3 ONLYCHANGED $1;
        doit include $5 $2 2> $4 | tee $3 | onlyChanged $1
    };
    markdown $1 > $2;
    open $2
}
mkht () 
{ 
    : convert a {default, the newest} source, SRC;
    set -- $(suf_newest src $1);
    set $1 ${1%.src}.md ../ch$(chno)_${1%.src}.md;
    app_trace $*;
    backup_lib mklib;
    app_trace "about to: markdown $1 > $2";
    smd $1;
    app_trace newwest $3 $2 OR cat $2 PIPE onlyChanged $3;
    newest $3 $2 || cat $2 | onlyChanged $3;
    comment what about *.sh *.run $(llib)/references.txt
}
labify () 
{ 
    : todo: insert in the SMD, OMD? functions;
    cat ${*:--} | awk '

    $1 !~ /^##*$/ { print; next }
                  {
                    label=$0
                    sub(/##* */,"",label)
                    sub(/ *$/,"", label)
                    gsub(/ /,"-",label)
                    printf "<a name=\"%s\">\n", tolower(label)
                    print $0
                    print "</a>";
                  }
    '
}
suf_newest () 
{ 
    echo ${2:-$(ls -t *.$1 | sed 1q)}
}
m4ht () 
{ 
    : convert a {default, the newest} Markdown into HTML copy;
    set -- $(suf_newest src $1);
    set $1 ../ch$(chno)_${1%.src}.md ${1%.src}.html;
    app_trace $*;
    backup_lib mklib;
    newest $3 $1 *.sh *.run $(include)/local.m4 $(llib)/references.txt && return;
    app_trace "about to: mm4 $1 | tee $2 | markdown - > $3";
    mm4 $1 | tee $2 | markdown - > $3
}
run_function () 
{ 
    app_trace $*;
    . $1;
    provenance ${*:2}
}
run_cmd () 
{ 
    : doc: creates a FILE.run from FILE.sh to include in the chapter;
    : args: FILE, commands, are stored in the command file;
    : date: 2019-05-17;
    report_notargcount 1 $# shell functions file && return 1;
    app_trace;
    cmd=$1.sh;
    shift;
    [[ -f $cmd ]] || printf "$ $*" > $cmd;
    provenance "$@" | fourspaces > ${cmd%.sh}.run
}
run_this () 
{ 
    : doc: creates a FILE.run from FILE.sh to include in the chapter;
    : args: FILE [function in the file, defaulting to FILE];
    : date: 2019-05-17;
    report_notargcount 1 $# shell functions file && return 1;
    newest $1.run $1.sh || { 
        run_function $1.sh $* | fourspaces > $1.run
    };
    comment $1.run
}
provenance () 
{ 
    : date: 2017-07-18;
    : date: 2019-05-18;
    app_trace $# "$@";
    report_notfunction ${1:-/dev/null} && return 1;
    echo '$' "$@";
    eval "$@";
    echo '$ ...'
}
chrefs () 
{ 
    : doc: HTTP CHapter REFerenceS;
    : todo: protect labels [xyx] with spaces;
    grep http ${*:-../chap*/*.md} | sed '

        s/^..\///
	s/:.*\[/	\[/
	s/:[ 	][ 	]*/	/
	s/\][(]/]	/
        s/  */	/
    '
}
functionConcept () 
{ 
    set -- $(myname);
    sort ../*/$1.txt | tee $(bitmeld)/lib/$1.txt
}
tabch () 
{ 
    : write to example .SH file, typically function source;
    fourspaces | onlyChanged $*
}
levelTwo () 
{ 
    : delivers level two document headers from either manuscript or chapter directories;
    : e.g. ~ *.md OR ~ ../chap*/*.md;
    :;
    grep '^## ' ${*:-*.md} | sed '

        # manuscript directory
        s/_.*## /	/

        # chapter directories
	s/^..\///
	s/\/.*## /	/
    '
}
llib () 
{ 
    : date: 2019-05-08;
    : date: 2019-05-14 added bitmeld ... HOME, chose first found;
    : date: 2019-05-14;
    for dir in $(bitmeld) $(home) $HOME;
    do
        local d=$dir/lib;
        [[ -d $d ]] && { 
            indir $d pwd;
            return
        };
    done
}
book_init () 
{ 
    backup_lib $(bitmeld)/bin/booklib;
    [[ -f mklib ]] && . ./mklib
}
md2ht () 
{ 
    set ${1:-$(pick $(ls -t *.md))};
    pdft markdown $1 html;
    open ${1%.md}.html
}
chapters () 
{ 
    sed '1,/mainmatter/d' nextBook.txt
}
mm4_test () 
{ 
    set ${1:-markua};
    mm4 --define _${1} test.m4 > ${1}_version.run
}
mm4 () 
{ 
    : name: Markdown M4;
    : doc: so long as Markua is handling Leanpubs markdown, which means "no
    : embedded HTML", and I was already using @include to embed code;
    : sequences, it now seems prudent to combine these in an upwardly;
    : compatible format, capapble of yielding both Gruber Markdown and Markua;
    :;
    m4 -I $(include) {hacks,underscore,local}.m4 $*
}
book ()
{
    app_isa $* || return
    
}
echo book_init 1>&2
